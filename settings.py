"""
Django settings for avisoframework project.

Generated by 'django-admin startproject' using Django 1.11b1.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/
"""
import importlib
import logging
import datetime
from logging.config import dictConfig
from logging.handlers import SysLogHandler
import os
import sys
import time
import json
from urllib import parse as urlparse

from aviso.framework import event_holder, tenant_holder
from aviso.framework.log import LogConfigHolder
from aviso.framework.metriclogger import Metriclogger
from aviso.framework.mongodb import GnanaMongoDB
from aviso.framework.postgresdb import GnanaPostgresDB
from aviso.utils import is_true, get_file_git_version
from boto import config
import memcache
import socket
import redis
from pymongo import MongoClient
import dj_database_url


# settings paths
AVISO_APPS_PATH = os.environ.get('AVISO_APPS_PATH', None)
if AVISO_APPS_PATH:
    sys.path.extend(AVISO_APPS_PATH.split(':'))


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

SITE_ROOT = os.path.normpath(
    os.path.join(
        os.path.dirname(os.path.realpath(__file__)
                        ), '..'))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/dev/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7^lq0*j2c14)&15r*ffb3p^l85cdjlc8-&s65e#=dzt8imh&9*'


deploy_mode = os.environ.get('mode', 'development')
in_test_mode = is_true(os.environ.get('gnana_test_mode', 'false'))
get_coverage_report = is_true(os.environ.get('GET_COVERAGE_REPORT', 'false')) and in_test_mode

ALLOWED_HOSTS = ['*']
if(deploy_mode == 'production'):
    DEBUG = False
    use_s3 = True
    worker_factor = 3
    ISPROD = is_true(os.environ.get('ISPROD', False))
elif(deploy_mode == 'development'):
    EMAIL_PORT = int(os.environ.get('EMAIL_PORT', 25))
    DEBUG = True
    use_s3 = is_true(os.environ.get('USE_S3'))
    pathprefix = os.environ['HOME'] + '/tenants'
    pathprefix = os.environ.get('GNANA_STORAGE', pathprefix)
    worker_factor = 2
    ISPROD = False

    # in dev mode Django uses localhost and 25 automatically and sends the mail
    # using sendmail.  If local sendmail is configured to send out the mails,
    # they will still work.
else:
    print("Unknown mode")
    exit(5)

# SECURITY WARNING: don't run with debug turned on in production!
# mode = os.environ.get('mode', 'debug')
# if mode == 'production':
#     DEBUG = False
# else:
#     DEBUG = True
# if not DEBUG:
#     ALLOWED_HOSTS = ['*']
# else:
#     ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'aviso',
    'accesslogs',
]

AVISO_APPS = os.environ.get('AVISO_APPS', None)

APP_PATH_DIRS = {"aviso":os.path.join(BASE_DIR, 'aviso')}

if AVISO_APPS is not None:
    apps = AVISO_APPS.split(':')
    # adding app to installed apps
    INSTALLED_APPS += apps
    for app in apps:
        app_path = os.path.dirname(__import__(app).__file__)
        APP_PATH_DIRS[app] = app_path

MIDDLEWARE_CLASSES = [
    # need to think weather need it or not #SECURITYMIDDLEWARE
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.common.CommonMiddleware',
    # 'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    # 'django.contrib.messages.middleware.MessageMiddleware',
    # 'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'aviso.framework.middleware.TenantSupportMiddleware',
    'aviso.framework.middleware.SessionIdleTimeout',
]

AUTHENTICATION_BACKENDS = ('aviso.framework.authentication.MongoBackend',
                           'aviso.framework.authentication.SAMLBackend'
                           )

# for boto
print("SETTING DEFAULT S3 ACCESS KEYS")

extra_settings_file = os.path.join(os.environ.get('EXTRA_SETTINGS_LOCATION',
                                                  os.path.expanduser('~')),
                                   'extra_settings.py')
gnana_tenant_bucket = 'aviso-test-data'
if os.path.exists(extra_settings_file):
    exec(open(extra_settings_file).read())
else:
    # for normal boto
    if not config.has_section('Credentials'):
        config.add_section('Credentials')
    if not config.has_option('Credentials', 'aws_access_key_id'):
        config.set('Credentials', 'aws_access_key_id', 'AKIAIKSEZMLY4CXGMDCQ')
    if not config.has_option('Credentials', 'aws_secret_access_key'):
        config.set('Credentials', 'aws_secret_access_key',
                   'Op32p4mqAmT+5MLiXgNLUqDtX1stSm1RPbC7icbq')


# we are using boto credential from extra-settings.py.
# as a approach to remove credentials usage and replace with role,
#  we are invalidating or removing credentials in non-debug mode. this is not necessary after removing it from extra settings
if not DEBUG:
    if config.has_section('Credentials'):
        config.remove_section('Credentials')

ROOT_URLCONF = 'aviso.urls'
DATA_UPLOAD_MAX_NUMBER_FIELDS = None
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(SITE_ROOT, "aviso", "templates"),
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]
WSGI_APPLICATION = 'aviso.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases
gnana_cprofile_bucket = 'aviso-dev-profiles'


pinned = is_true(os.environ.get('PINNED', False))

memcache_server = os.environ.get('MEM_CACHE_INSTANCE') or 'localhost'

postgres_db_url = os.environ.get(
    'postgres_db_url', 'postgres://etluser:etluser@localhost:5432/etldb')


postgres_common_db_enabled = is_true(
    os.environ.get('postgres_common_db_enabled', ''))

# pg_db_con_url = os.environ.get('postgres_common_db_url', postgres_db_url)
pg_db_con_url = "postgres://waqas:waqas79543@localhost:5502/postgres"
# mongo_db_url = 'mongodb://etluser:etluser@localhost:27017/etldb'

# mongo_db_url = os.environ.get('MONGOLAB_URI', )
mongo_db_url = "mongodb://preprod:Ytxe4GWqwWsu@mongo-fmapp-qa-shard0-0.aviso.com:27016/admin"

mongo_db_url = os.environ.get('MONGODB_URI', mongo_db_url)
mongo_db_url_fm = os.environ.get('MONGODB_URI_FM', None)
mongo_db_url_parsed = urlparse.urlparse(mongo_db_url)

CNAME = os.environ.get('GNANA_CNAME', "localhost")
CNAME_FM = os.environ.get('GNANA_CNAME_FM', "localhost")

CNAME_DISPLAY_NAME = os.environ.get('CNAME_DISPLAY_NAME', None)

POOL_PREFIX = CNAME_DISPLAY_NAME if CNAME_DISPLAY_NAME else CNAME

node = os.environ.get('INSTANCE_IP', socket.gethostname())

ISPROD = is_true(os.environ.get('ISPROD', False))

# CELERY STUFF
BROKER_URL = os.environ.get("CELERY_BROKER", 'redis://localhost:6379')
CELERY_RESULT_BACKEND = os.environ.get("CELERY_BROKER", 'redis://localhost:6379')
CELERY_ACCEPT_CONTENT = ['application/json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'
CELERY_TIMEZONE = 'Africa/Nairobi'

BACKUP_CONFIG = is_true(os.environ.get('BACKUP_CONFIG', 'False'))

task_validity = int(os.environ.get('task_validity', 2))

task_expire_seconds = int(os.environ.get('task_expire_seconds', datetime.timedelta(hours=24).total_seconds()))

archive_analyticengine_validity = int(os.environ.get("archive_analyticengine_validity", 92))

archive_task_validity = int(os.environ.get("archive_task_validity", 7))

res_cache_validity = int(os.environ.get("res_cache_validity", 2))

res_archive_validity = int(os.environ.get("res_archive_validity", 15))

res_cache_analyticengine_validity = int(os.environ.get("res_cache_analyticengine_validity", 100))

res_archive_analyticengine_validity = int(os.environ.get("res_archive_analyticengine_validity", 365))

taskactive_validity = res_cache_validity

taskactive_analyticengine_validity = res_cache_analyticengine_validity

ADMIN_DOMAIN = "administrative.domain"


enable_dsession = False

allowed_test_domains = []
django_session_enabled = True

POSTGRES_DB_URL = pg_db_con_url

pg_url_parsed = urlparse.urlparse(pg_db_con_url)
django_session_db_url_parsed = pg_url_parsed

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    },
    'session_db': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': django_session_db_url_parsed.path.strip("/"),
        'TEST_NAME': 'UnitTestDB',  # 'TEST_NAME' is the test database name for the unit tests
        'USER': django_session_db_url_parsed.username,
        'PASSWORD': django_session_db_url_parsed.password,
        'HOST': django_session_db_url_parsed.hostname,
        'PORT': django_session_db_url_parsed.port,
    },
    'mon_db': {
        'NAME': 'mon_db',
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'USER': django_session_db_url_parsed.username,
        'PASSWORD': django_session_db_url_parsed.password,
        'HOST': django_session_db_url_parsed.hostname,
        'PORT': django_session_db_url_parsed.port,
    }
}


ACCESSLOG = True
if not DEBUG:
    if 'OPCENTER_PWD' not in locals():
        OPCENTER_PWD = os.environ.get('OPCENTER_DB_PASSWORD', None)

    if OPCENTER_PWD:
        ACCESSLOG = True

        DEFAULT_OPSDB = 'mysql://gnana:gnana@devopscenter.chm9s1xog441.us-east-1.rds.amazonaws.com:3306/gnana'
        DATABASES['default'] = dj_database_url.config(env='OPSDB_URL', default=DEFAULT_OPSDB)
        DATABASES['default']['PASSWORD'] = OPCENTER_PWD
        DATABASES['logs_access'] = DATABASES['default']
    else:
        ACCESSLOG = False
else:
    ACCESSLOG = True
    DATABASES['logs_access'] = DATABASES['session_db']

    print("Access logging is enabled for local development")

# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

DATABASE_ROUTERS = ['aviso.framework.sessiondb_router.SessionDBRouter']

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/
if deploy_mode == 'development':
    STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
else:
    STATIC_ROOT = '/opt/static'

STATIC_URL = '/static/'


if os.environ.get("gnana_test_mode", "") == "true":
    allowed_test_domains.append("foo@bar.com")


if 'mongo-db-name' not in os.environ:
    # Use the DBname from url
    dbname = mongo_db_url_parsed.path.strip('/')
    os.environ['mongo-db-name'] = dbname

# if 'mongo-db-name-2' not in os.environ:
#     # Use the DBname from url
#     dbname = mongo_db_url_parsed_2.path.strip('/')
#     os.environ['mongo-db-name-2'] = dbname

# class S3_Connection():
#
#     def gnana_storage(self, use_s3):
#         from aviso.framework.storage import GnanaS3Storage, GnanaFileStorage
#         if use_s3:
#             gnana_storage = GnanaS3Storage()
#         else:
#             gnana_storage = GnanaFileStorage()
#         return gnana_storage
#
#
# gnana_storage = S3_Connection().gnana_storage(use_s3)

GBM_CHIPOTLE_EXCLUDE_LIST = os.environ.get('GBM_CHIPOTLE_EXCLUDE_LIST', '')

class Cache_Connection():
    """
        Create memcache connection.
        call Cache_Connection().mem_cache(DEBUG, memcache_server),
        wherever you want to use memcache.
    """

    def __init__(self):
        self._cache = self.set_cache(DEBUG, memcache_server)
        self.pid = os.getpid()

    def set_cache(self, DEBUG, memcache_server):
        if not DEBUG:
            for i in range(5):
                try:
                    print("Connecting to cache using 'C' libraries")
                    import pylibmc
                    cache = pylibmc.Client(
                        [memcache_server], binary=True,
                        behaviors={"tcp_nodelay": True, "ketama": True}
                    )
                    cache.set('test', 'test')
                except:
                    traceback.print_exc()
                    cache = None
                if cache is not None:
                    break
                logger.info("Retrying memcached Connection")
                time.sleep(i * 5)

            if not cache:
                print("Exiting as we are unable to connect to cache")
                sys.exit(1)
        else:
            try:
                print("Connecting to cache using pure python (Used only in dev mode)")
                import memcache
                cache = memcache.Client([memcache_server],
                                        server_max_value_length=30 * 1024 * 1024)
            except Exception:
                traceback.print_exc()
                cache = None
        return cache

    def get_cache(self):
        if self.pid != os.getpid():
            self.pid = os.getpid()
            self._cache = self.set_cache(DEBUG, memcache_server)
        else:
            try:
                self._cache.get('test')
            except Exception as e:
                self._cache = self.set_cache(DEBUG, memcache_server)
        return self._cache
    cache = property(get_cache)


cache_ttls = {
    'default': 60 * 60,
    'uip': 120 * 60,
}


SESSION_ENGINE = "django.contrib.sessions.backends.db"

# Logging configuration
syslog_address = None
_platform = sys.platform
if _platform == "linux" or _platform == "linux2":
    # Linux
    syslog_address = '/dev/log'
elif _platform == "darwin":
    # OS X
    syslog_address = '/var/run/syslog'
elif _platform == "win32":
    # Windows
    # do something with UDP sockets
    pass
else:
    # throw some sort of unsupported platform error
    pass


LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'formatters': {
        'verbose': {
            '()': 'aviso.framework.GnanaLogFormatter',
            'format': '%(levelname)s [%(username)s FOR %(tenant)s IN ' + POOL_PREFIX + ']\
             [PID-%(process)d] [%(trace)s] %(module)s %(message)s'
        },
        'simple': {
            '()': 'aviso.framework.GnanaLogFormatter',
            'format': '%(levelname)s [%(username)s@%(tenant)s] [%(process)d]\
             [%(trace)s] %(message)s %(name)s:L%(lineno)s '
        },
        'full': {
            '()': 'aviso.framework.AvisoFullLogFormatter',
            'format': '%(levelname)-8s|%(asctime)s|%(hostname)s|%(pathname)s|%(funcName)s|%(lineno)d|[%(username)s FOR %(tenant)s IN %(stack)s] [PID-%(process)d] [%(trace)s] %(module)s %(message)s'
        },
    },
    'handlers': {
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler'
        },
        'console': {
            'level': 'DEBUG',
            '()': 'logging.StreamHandler',
            'formatter': 'simple'
        },
        'syslog': {
            'address': syslog_address,
            'level': 'INFO',
            'class': 'logging.handlers.SysLogHandler',
            'formatter': 'verbose',
            'facility': SysLogHandler.LOG_LOCAL0
        },
        'file': {
            'filename': 'test.log',
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'verbose',
        },
        'file_log': {  # For production
            'filename': 'logs/app.log',
            'class': 'logging.handlers.WatchedFileHandler',
            'formatter': 'full',
        },
    },
    'loggers': {
        '': {
            'handlers': ['console'],
            'level': 'ERROR',
        },
        'django.request': {
            'handlers': ['mail_admins'],
            'level': 'ERROR',
            'propagate': True,
        },
        'gnana': {
            'handlers': ['console'],  # 'syslog'],
            'level': 'INFO',
            'propagate': False,
        },
    }
}

# TODO: Change the hardcoded deploy_mode and in_test_mode once the project
# goes LIVE

if(deploy_mode == 'production'):
    from aviso import debug_tracer
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
    # SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
else:
    SECURE_PROXY_SSL_HEADER = ('HTTP_X_SCHEME', 'https')


# deploy_mode = 'development'
# in_test_mode = True

if deploy_mode == 'production' or os.environ.get('GNANA_SERVICE', 0):
    # Enable filelog and syslog in production
    LOGGING['loggers']['gnana']['handlers'].extend(['file_log'])
    LOGGING['loggers']['']['handlers'].extend(['file_log'])
elif in_test_mode:
    LOGGING['loggers']['gnana']['handlers'].extend(['file'])
    LOGGING['loggers']['']['handlers'].extend(['file'])

dictConfig(LOGGING)
logging.setLoggerClass(Metriclogger)

logger = logging.getLogger('gnana.%s' % __name__)

# Perform INITIALIZATIONS


# cacheconn initialize
# cache_con = Cache_Connection()

# postgres initialize
gnana_db2 = GnanaPostgresDB()

# mongodb initialize
gnana_db = None

try:
    mongo_con = MongoClient(mongo_db_url, unicode_decode_error_handler = 'ignore')[os.environ['mongo-db-name']]
    gnana_db = GnanaMongoDB(mongo_con)
except Exception as e:
    logger.exception("Unable to connect to MONGODB: " + str(e))

# try:
#     mongo_con_2 = MongoClient(mongo_db_url_2)[os.environ['mongo-db-name-2']]
#     gnana_db3 = GnanaMongoDB(mongo_con_2)
# except Exception as e:
#     logger.exception("unable to connect to fm app mongodb" + str(e))

# try:
#     local_mongo_db = MongoClient(
#         "mongodb://localhost:27017/", w=0, unicode_decode_error_handler = 'ignore')[os.environ.get('mongo-cache-db', 'local_cache')]
#     local_db = GnanaMongoDB(local_mongo_db)
# except Exception as e:
#     logger.exception(
#         "Unable to connect with the local mongodb for local cache service: " + str(e))
#     local_mongo_db = None
#     local_db = None
cache_server = is_true(os.environ.get('CACHE_SERVER', False))
event_context = event_holder
sec_context = tenant_holder


# TODO: Log_config is none for current development
# Need to copy log_config for stage before pushing to production

if 'OPCENTER_PWD' not in locals():
    OPCENTER_PWD = os.environ.get('OPCENTER_DB_PASSWORD', None)
EMAIL_SENDER = 'admin@aviso.com'
log_config = None

TMP_DIR = '/tmp'

if gnana_db:
    gnana_db.is_prod = ISPROD
    gnana_db.sec_context = sec_context

gnana_db2.sec_context = sec_context

# gnana_db3.sec_context = sec_context

local_settings_path = os.path.join(SITE_ROOT, "local", "settings.py")
if os.path.exists(local_settings_path) and DEBUG:
    print("local/settings.py detected.  Loading local settings module.")
    with open(local_settings_path) as f:
        exec(f.read())

USE_TZ = True

ADMIN_DOMAIN = "administrative.domain"

ADMINS = (
    ('Administrator', 'admin@aviso.com'),
)
MANAGERS = ADMINS

# To skip the migrations in test cases
SOUTH_TESTS_MIGRATE = False  # To disable migrations and use syncdb instead
SKIP_SOUTH_TESTS = True  # To disable South's own unit tests

LOGIN_URL = '/login'
LOGOUT_URL = 'logout'

FORGOT_PASS_NOTIFY_MAIL = os.environ.get('FORGOT_PASS_NOTIFY_TO') if os.environ.get(
    'FORGOT_PASS_NOTIFY_TO', None) else os.environ.get('OPERATOR_EMAIL')

AUTH_USER_MODEL = 'aviso.User'

# STATICFILES_DIRS += tuple(STATIC_DIRS_FROM_APPS)
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
    # os.path.join(BASE_DIR+'/aviso', 'avisosdk'),
)

CODE_VERSION = get_file_git_version(SITE_ROOT)

microservices_user = os.environ.get('MICROSERVICES_USER', 'gnana@administrative.domain')
microservices_user_sigin_key = os.environ.get('MICROSERVICES_USER_SIGNIN_KEY',
                                              os.path.join(os.path.expanduser("~"),
                                                           '.ssh/id_rsa'))
script_users = os.environ.get('script_users', "")
script_users = [user + "@administrative.domain" for user in script_users.split(':')] + [
    "etl_user@administrative.domain",
    "build_user@administrative.domain"
]

microservices_user_password = os.environ.get('MICROSERVICES_USER_PASSWORD', 'gnana')

WORKER_POOL = os.environ.get('WORKER_POOL', 'primary-pool')
DEFAULT_HEARTBEAT_DEAD_TIME = int(os.environ.get('DEFAULT_HEARTBEAT_DEAD_TIME', '600'))
TASK_DEFAULT_RETRY_STRATEGY = os.environ.get('TASK_DEFAULT_RETRY_STRATEGY', 'exponential')

def get_pool_tiers(pool_tiers_str=os.environ.get('WORKER_POOL_TIERS', '').strip()):
    if pool_tiers_str == '':
        return []
    return list([(pair.split(':')[0], int(pair.split(':')[1])) for pair in pool_tiers_str.split(',')])


# WORKER_POOL_TIERS should be defined as "small_pool:1024,med_pool:4096,xxlarge_pool:131072"
# for a small pool of 1gb, med pool of 4gb, and xxlarge pool as 128GB
# the task scheduler will try to place the task in the smallest pool needed
WORKER_POOL_TIERS = get_pool_tiers()

# if not DEBUG:
#    # see - https://cloudinit.readthedocs.io/en/latest/topics/instancedata.html#instance-metadata
#    # it's important that this value is accurate for production, if we do not have this value
#    # we should not start, our peers with the same code base depend on it for the task framework
#    # task execution
#    with open('/run/cloud-init/instance-data.json', 'r') as reader:
#        cloud_init_data = json.load(reader)
#        BUILD_ID = str(cloud_init_data["ds"]["meta-data"]["ami-id"])
#else:
#    BUILD_ID = "build.local"
BUILD_ID = None

from aviso.events import EVENT_SUBSCRIPTIONS, EVENT_TYPES

TEST_RUNNER = 'aviso.unit_test_runner.UnitTestRunner'

GLOBAL_CACHE_URL = os.environ.get('GLOBAL_CACHE_URL', None)
if DEBUG:
    global_cache = memcache.Client([memcache_server],
                                   server_max_value_length=30 * 1024 * 1024)
else:
    global_cache = redis.from_url(GLOBAL_CACHE_URL, socket_keepalive=True, socket_timeout=300)

SDK_VERSION_FILE_NAME = str(AVISO_APPS) + '_SDK_VERSION'
try:
    with open(SDK_VERSION_FILE_NAME) as f:
        SDK_VERSION = f.read()
except:
    SDK_VERSION = 'NOT_DEFINED'
#Code snippet to allow datadog APM for django > 1.8
ENV = os.environ.get('ENV','QA')
if os.environ.get("DATADOG_APM_ENABLE"):
    INSTALLED_APPS += ('ddtrace.contrib.django',)
    DATADOG_TRACE = {
        'ENABLED': True,
        'TAGS': {'env': ENV}
    }

# Splitting the DB name from the URL.
uri_split = mongo_db_url.split("//")
db_split = uri_split[1].split(":")
mongo_db_name = db_split[0]

ACCOUNT_NEWS_DB = mongo_db_name